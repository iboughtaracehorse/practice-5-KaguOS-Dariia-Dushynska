// KaguOS kernel main code

// ##########################################
// # INITRAMFS_START                        #
// ##########################################
label kernel_entry_point

DEBUG_OFF

write "Operation register:" to INFO_REG_OP
write "A register:" to INFO_REG_A
write "B register:" to INFO_REG_B
write "C register:" to INFO_REG_C
write "D register:" to INFO_REG_D
write "Result register:" to INFO_REG_RES
write "Comparison result register:" to INFO_REG_BOOL_RES
write "Error register:" to INFO_REG_ERROR
write "Display buffer:" to INFO_DISPLAY_BUFFER
write "Display color:" to INFO_DISPLAY_COLOR
write "Keyboard buffer:" to INFO_KEYBOARD_BUFFER
write "Display background:" to INFO_DISPLAY_BACKGROUND
write "Program counter:" to INFO_PROGRAM_COUNTER
write "Free memory start:" to INFO_FREE_MEMORY_START
write "Free memory end:" to INFO_FREE_MEMORY_END
write "Free chunks:" to INFO_FREE_CHUNKS
write "" to FREE_CHUNKS

// Let's init pointer to the stack
//      var:sys_stack_ptr = FREE_MEMORY_END + 1
// Therefore on any push to stack we will decrement it
// If sys_stack_pop will be called incorrectly then we will get crashed
copy FREE_MEMORY_END to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:sys_stack_ptr

// init file system
copy PROGRAM_COUNTER to var:sys_return
jump label:sys_fs_init


// Print welcome message
write "RAMFS init - done." to DISPLAY_BUFFER
write COLOR_GREEN to DISPLAY_COLOR
write OP_DISPLAY_LN to REG_OP
cpu_exec

// ##########################################
// # INITRAMFS_END                          #
// ##########################################


// ##########################################
// # KERNEL_START                           #
// ##########################################
    // # Display welcome message:
    write "Welcome to KaguOS" to DISPLAY_BUFFER
    write COLOR_GREEN to DISPLAY_COLOR
    write OP_DISPLAY_LN to REG_OP
    cpu_exec

    var exitStr
    write "exit" to var:exitStr

    var catStr
    write "cat" to var:catStr

    var modifyStr
    write "modify" to var:modifyStr

label kernel_start
    // Display prompt to enter the value:
    copy var:sys_work_dir to DISPLAY_BUFFER
    write "" to DISPLAY_COLOR
    write OP_DISPLAY to REG_OP
    cpu_exec
    write " :) " to DISPLAY_BUFFER
    cpu_exec

    // read cmd from keyboard
    write OP_READ_INPUT to REG_OP
    write KEYBOARD_READ_LINE to REG_A
    cpu_exec

    // split into command and arguments:
    copy KEYBOARD_BUFFER to REG_A
    write "1" to REG_B
    write " " to REG_C
    write OP_GET_COLUMN to REG_OP
    cpu_exec
    var parsedStr
    copy REG_RES to var:parsedStr

    // Get first argument of the command
    var parsedArg1
    copy KEYBOARD_BUFFER to REG_A
    write 2 to REG_B
    write " " to REG_C
    write OP_GET_COLUMN to REG_OP
    cpu_exec
    copy REG_RES to var:parsedArg1

    // Display a message with the first component of input:
    write "Parsed command:" to DISPLAY_BUFFER
    write "" to DISPLAY_COLOR
    write OP_DISPLAY_LN to REG_OP
    cpu_exec
    copy var:parsedStr to DISPLAY_BUFFER
    write "" to DISPLAY_COLOR
    write OP_DISPLAY_LN to REG_OP
    cpu_exec

    // Check if command is exit if not then jump to the start of the loop
    // otherwise we will go to the next instruction which is exit
    copy var:parsedStr to REG_A
    copy var:exitStr to REG_B
    write OP_CMP_EQ to REG_OP
    cpu_exec
    jump_if label:kernel_end

    // Check cat command e.g. cat path/to/file :
    copy var:parsedStr to REG_A
    copy var:catStr to REG_B
    write OP_CMP_EQ to REG_OP
    cpu_exec
    jump_if label:cat_command

    copy var:parsedStr to REG_A
    copy var:modifyStr to REG_B
    write OP_CMP_EQ to REG_OP
    cpu_exec
    jump_if label:modify_command

    jump label:kernel_start

label cat_command

    copy var:parsedArg1 to REG_A
    write "" to REG_B
    write OP_CMP_EQ to REG_OP
    cpu_exec
    jump_if label:kernel_start

    // let's open file:
    var cat_command_file_desc
    copy var:parsedArg1 to REG_A
    copy PROGRAM_COUNTER to var:sys_return
    jump label:sys_fs_open
    jump_err label:kernel_start
    copy REG_RES to var:cat_command_file_desc

    copy var:cat_command_file_desc to REG_A
    copy PROGRAM_COUNTER to var:sys_return
    jump label:sys_fs_descriptor_info
    write "File descriptor info(name disk fileHeaderBlock fileSize): " to DISPLAY_BUFFER
    write COLOR_CYAN to DISPLAY_COLOR
    write OP_DISPLAY to REG_OP
    cpu_exec
    copy REG_RES to DISPLAY_BUFFER
    write OP_DISPLAY_LN to REG_OP
    cpu_exec

    // Read it line by line:
    var cat_command_counter
    write 1 to var:cat_command_counter
    label cat_command_loop
        copy var:cat_command_file_desc to REG_A
        copy var:cat_command_counter to REG_B
        copy PROGRAM_COUNTER to var:sys_return
        jump label:sys_fs_read
        jump_err label:cat_command_close

        copy REG_RES to DISPLAY_BUFFER
        write COLOR_GREEN to DISPLAY_COLOR
        write OP_DISPLAY_LN to REG_OP
        cpu_exec

        copy var:cat_command_counter to REG_A
        write OP_INCR to REG_OP
        cpu_exec
        copy REG_RES to var:cat_command_counter

        jump label:cat_command_loop

    label cat_command_close
        // Let's close file
        copy var:cat_command_file_desc to REG_A
        copy PROGRAM_COUNTER to var:sys_return
        jump label:sys_fs_close
        jump label:kernel_start

label modify_command

    copy var:parsedArg1 to REG_A
    write "" to REG_B
    write OP_CMP_EQ to REG_OP
    cpu_exec
    jump_if label:modify_command_error

    var modify_command_file_desc
    copy var:parsedArg1 to REG_A
    copy PROGRAM_COUNTER to var:sys_return
    jump label:sys_fs_open
    jump_err label:modify_command_error
    copy REG_RES to var:modify_command_file_desc

    var modify_command_line_counter
    write 1 to var:modify_command_line_counter

    label modify_command_loop
        var current_line
        copy var:modify_command_file_desc to REG_A
        copy var:modify_command_line_counter to REG_B
        copy PROGRAM_COUNTER to var:sys_return
        jump label:sys_fs_read
        jump_err label:modify_command_close

        copy REG_RES to var:current_line
        var char
        copy var:current_line to REG_A
        write 1 to REG_B
        write "" to REG_C

        write OP_GET_COLUMN to REG_OP
        cpu_exec
        copy REG_RES to var:char

        copy var:char to REG_A
        write OP_IS_NUM to REG_OP
        cpu_exec
        jump_if_not label:modify_command_increment

        copy var:char to REG_A
        write OP_INCR to REG_OP
        cpu_exec
        copy REG_RES to var:char

        var result
        copy var:result to REG_A
        write 1 to REG_B
        write "" to REG_C
        copy var:char to REG_D
        write OP_REPLACE_COLUMN to REG_OP
        cpu_exec
        copy REG_RES to var:result
        copy var:modify_command_file_desc to REG_A
        copy var:modify_command_line_counter to REG_B
        copy var:result to REG_C

        copy PROGRAM_COUNTER to var:sys_return
        jump label:sys_fs_write
        jump_err label:modify_command_close


    label modify_command_increment
        copy var:modify_command_line_counter to REG_A
        write OP_INCR to REG_OP
        cpu_exec
        copy REG_RES to modify_command_line_counter
        jump label:modify_command_loop

    label modify_command_error
        write "ERROR: Cannot modify commmand" to DISPLAY_BUFFER
        write OP_DISPLAY to REG_OP
        cpu_exec
        jump label:kernel_start

    label modify_command_close
        copy var:modify_command_file_desc to REG_A
        copy PROGRAM_COUNTER to var:sys_return
        jump label:sys_fs_close


label kernel_end
    copy REG_ERROR to DISPLAY_BUFFER
    write COLOR_RED to DISPLAY_COLOR
    write OP_DISPLAY_LN to REG_OP
    cpu_exec

    // Print bye message and exit:
    write "Good bye!" to DISPLAY_BUFFER
    write COLOR_GREEN to DISPLAY_COLOR
    write OP_DISPLAY_LN to REG_OP
    cpu_exec

    write OP_HALT to REG_OP
    cpu_exec
// ##########################################
// # KERNEL_END                             #
// ##########################################
